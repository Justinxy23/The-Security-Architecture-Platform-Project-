version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: securearch-db
    environment:
      POSTGRES_USER: ${DB_USER:-securearch}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecureArch2025!}
      POSTGRES_DB: ${DB_NAME:-securearch_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securearch"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: securearch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-RedisSecure2025!}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: securearch-backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-securearch}:${DB_PASSWORD:-SecureArch2025!}@postgres:5432/${DB_NAME:-securearch_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisSecure2025!}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      DEBUG: ${DEBUG:-True}
      API_HOST: 0.0.0.0
      API_PORT: 8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: securearch-frontend
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:8000}
      REACT_APP_WS_URL: ${WS_URL:-ws://localhost:8000}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: securearch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

  # Elasticsearch for SIEM functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: securearch-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: securearch-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: securearch-prometheus
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: securearch-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

  # Celery Worker for async tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: securearch-celery-worker
    environment:
      DATABASE_URL: postgresql://${DB_USER:-securearch}:${DB_PASSWORD:-SecureArch2025!}@postgres:5432/${DB_NAME:-securearch_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisSecure2025!}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-RedisSecure2025!}@redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    command: celery -A core.celery_app worker --loglevel=info

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: securearch-celery-beat
    environment:
      DATABASE_URL: postgresql://${DB_USER:-securearch}:${DB_PASSWORD:-SecureArch2025!}@postgres:5432/${DB_NAME:-securearch_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisSecure2025!}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-RedisSecure2025!}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    command: celery -A core.celery_app beat --loglevel=info

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: securearch-network