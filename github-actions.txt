name: SecureArch Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Backend Tests and Security Scanning
  backend-test:
    name: Backend Tests & Security
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
    
    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
      run: |
        cd backend
        pytest -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Security scan with Bandit
      run: |
        cd backend
        bandit -r . -ll -i tests
    
    - name: Dependency security check
      run: |
        cd backend
        safety check --json
    
    - name: SAST with Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/django
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: |
          backend/htmlcov/
          backend/.coverage
          backend/pytest-report.xml

  # Frontend Tests and Security Scanning
  frontend-test:
    name: Frontend Tests & Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run tests with coverage
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Security audit
      run: |
        cd frontend
        npm audit --production
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/build/

  # iOS App Tests
  ios-test:
    name: iOS App Tests
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_14.3.app
    
    - name: Install dependencies
      run: |
        cd mobile
        pod install
    
    - name: Run SwiftLint
      run: |
        cd mobile
        swiftlint
    
    - name: Run tests
      run: |
        cd mobile
        xcodebuild test \
          -workspace SecureArchApp.xcworkspace \
          -scheme SecureArchApp \
          -destination 'platform=iOS Simulator,name=iPhone 14 Pro' \
          -resultBundlePath TestResults
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ios-test-results
        path: mobile/TestResults

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: securearch-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: securearch-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'securearch-backend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Infrastructure as Code Validation
  iac-validation:
    name: IaC Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    
    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check
    
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
    
    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate
    
    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/
        framework: terraform,kubernetes
        output_format: sarif
        output_file_path: checkov.sarif
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov.sarif

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to be ready
    
    - name: Run API integration tests
      run: |
        docker-compose exec -T backend pytest tests/integration -v
    
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Stop services
      if: always()
      run: docker-compose down -v

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Start services
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Run k6 performance tests
      uses: k6io/action@v0.1
      with:
        filename: tests/performance/load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results/

  # Deploy to staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: staging-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/securearch-backend:$IMAGE_TAG ./backend
        docker build -t $ECR_REGISTRY/securearch-frontend:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/securearch-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/securearch-frontend:$IMAGE_TAG
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name securearch-staging
        kubectl set image deployment/backend backend=$ECR_REGISTRY/securearch-backend:$IMAGE_TAG -n staging
        kubectl set image deployment/frontend frontend=$ECR_REGISTRY/securearch-frontend:$IMAGE_TAG -n staging
        kubectl rollout status deployment/backend -n staging
        kubectl rollout status deployment/frontend -n staging

  # Deploy to production (only on main branch with approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/securearch-backend:$IMAGE_TAG ./backend
        docker build -t $ECR_REGISTRY/securearch-frontend:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/securearch-backend:$IMAGE_TAG
        docker push $ECR_REGISTRY/securearch-frontend:$IMAGE_TAG
    
    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name securearch-production
        kubectl set image deployment/backend backend=$ECR_REGISTRY/securearch-backend:$IMAGE_TAG -n production
        kubectl set image deployment/frontend frontend=$ECR_REGISTRY/securearch-frontend:$IMAGE_TAG -n production
        kubectl rollout status deployment/backend -n production
        kubectl rollout status deployment/frontend -n production
    
    - name: Run smoke tests
      run: |
        cd tests/smoke
        ./run-smoke-tests.sh https://api.securearch.com

  # Notify on completion
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, ios-test, docker-build, iac-validation]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Pipeline Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Branch: ${{ github.ref }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()